# from https://github.com/marketplace/actions/install-poetry-action

name: build and deploy to server

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

on:
  push:
    branches: [ "master", "main" ]
    paths-ignore: [ "docs/**" ]
  schedule:
    - cron: "30 4 * * *"
  workflow_dispatch:

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:

  build:
    name: Build
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      #----------------------------------------------
      # Prepare commit info for deploy
      #----------------------------------------------
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v5
      #----------------------------------------------
      # Extact commit info for build
      #----------------------------------------------
      - name: Docker meta
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.GITHUB_REPOSITORY }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
      #----------------------------------------------
      # Prepare for building image
      #----------------------------------------------
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx
      #----------------------------------------------
      # Auth to docker hub
      #----------------------------------------------
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      #----------------------------------------------
      # Build and upload image
      #----------------------------------------------
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: deploy/Dockerfile
          push: true
          ulimit: nofile=1048576:1048576
          builder: ${{ steps.buildx.outputs.name }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    runs-on: ubuntu-22.04
    needs: build
    environment:
      name: production
    steps:
      #----------------------------------------------
      # Copy docker compose production config
      #----------------------------------------------
      - name: Checkout
        uses: actions/checkout@v4

      #----------------------------------------------
      # Prepare commit info for deploy
      #----------------------------------------------
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v5

      #----------------------------------------------
      # Copy configs to server
      #----------------------------------------------
      - name: copy configs
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "deploy/docker_compose.prod.yml"
          target: "classifier/"

      #----------------------------------------------
      # Run docker compose
      #----------------------------------------------
      - name: executing remote ssh commands
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          script: |
            # image tag
            export COMMIT_TAG=${{env.GITHUB_REF_SLUG}}

            cd ~/classifier/deploy

            # deploy app
            docker compose -f docker_compose.prod.yml -p classifier pull
            docker compose -f docker_compose.prod.yml -p classifier up -d
